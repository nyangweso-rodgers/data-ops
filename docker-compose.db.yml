############################### Database Services #############################################
services:
  ############################# 1.1 PostgreSQL Database ###############################################
  #
  postgres-db:
    build:
      context: ./01-databases/01-postgres
      dockerfile: Dockerfile
    container_name: postgres-db
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #command:["postgres","-c","wal_level=logical","-c","max_replication_slots=10","-c","max_wal_senders=10",]
    #command: ["postgres", "-c", "wal_level=logical"]
    command: -c 'shared_preload_libraries=pg_stat_statements'
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./01-databases/01-postgres/init-scripts:/docker-entrypoint-initdb.d/ # Mount init scripts directory
    healthcheck:
      #test: ["CMD", "psql", "-U", "postgres", "-c", "SELECT 1"]
      # or
      #test: ["CMD", "psql", "-U", "admin", "-c", "SELECT 1"]
      test: [
          "CMD-SHELL",
          "PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -d postgres -c 'SELECT 1'",
        ] # Use default database `postgres`
      interval: 10s
      timeout: 5s
      retries: 10
    #logging:
    #driver: "json-file"
    #options:
    #max-size: "2048m"
    networks:
      - data-ops-network
  # pgadmin
  #
  #pgadmin:
  #image: dpage/pgadmin4:8.7 # https://hub.docker.com/layers/dpage/pgadmin4/8.7/images/sha256-198236db5d90e491354c351ccd02a21ce736030b72cd0f8b05430bc48a59d86b?context=explore
  #image: dpage/pgadmin4:8.14.0 # https://hub.docker.com/r/dpage/pgadmin4/tags
  #container_name: pgadmin
  #restart: always
  #ports:
  #- "5050:80"
  #env_file:
  #- .env
  #environment:
  #PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #volumes:
  #- pgadmin-volume:/var/lib/pgadmin
  #depends_on:
  #- postgres-db
  #networks:
  #- data-ops-network
  ############################## 1.2 MySQL Database #############################################
  #
  mysql-db:
    build: ./01-databases/03-mysql
    container_name: mysql-db
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_DB_ROOT_PASSWORD}
    #command: --bind-address=0.0.0.0  # Listen on all interfaces
    command: --bind-address=0.0.0.0 --wait_timeout=28800 --interactive_timeout=28800
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mysql-db-volume:/var/lib/mysql
      - ./01-databases/03-mysql/init-scripts/:/docker-entrypoint-initdb.d
    networks:
      - data-ops-network
  ############################## 1.3 MongoDB Community Edition Database #############################################
  #
  mongo-db-community-server:
    build:
      context: ./01-databases/02-mongodb-community-server
      dockerfile: Dockerfile
    container_name: mongo-db-community-server
    ports:
      - "27017:27017"
    #env_file: ./databases/02-mongodb-community-server/.env
    env_file:
      - .env
    environment:
      MONGODB_INITDB_ROOT_USERNAME: ${MONGODB_INITDB_ROOT_USERNAME}
      MONGODB_INITDB_ROOT_PASSWORD: ${MONGODB_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-db-community-server-volume:/data/db
    networks:
      - data-ops-network
################################ Networks ############################################
networks:
  data-ops-network:
    external: true # Use the existing network from docker-compose.yml
################################ Volumes ############################################
volumes:
  postgres-db-volume:
    name: postgres-db-volume
  mysql-db-volume:
    name: mysql-db-volume
  pgadmin-volume:
    name: pgadmin-volume
  mongo-db-community-server-volume:
    driver: local