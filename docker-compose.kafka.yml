################################ Messaging Services ############################################
services:
   ################################ 1 Kafka Zookeeper ############################################
  # kafka-zookeeper
  #
  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: kafka-zookeeper
    restart: always
    #restart: on-failure
    ports:
      - "2181:2181"
    environment:
      #- ALLOW_ANONYMOUS_LOGIN=yes
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - kafka-zookeeper-volume:/var/lib/zookeeper/data
    healthcheck:
      test: echo srvr | nc kafka-zookeeper 2181 || exit 1
      #test: curl -s localhost:2181 || exit 1 # using curl to query the Zookeeper server status:
      start_period: 10s
      retries: 20
      interval: 10s
    networks:
      - data-ops-network
  ################################ 2 Apache Kafka ############################################
  #
  kafka:
    build:
      context: ./03-messaging/01-apache-kafka
      dockerfile: Dockerfile
    #hostname: kafka
    container_name: kafka
    depends_on:
      kafka-zookeeper:
        condition: service_healthy
    restart: always
    #restart: on-failure
    ports:
      # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
      # An important note about accessing Kafka from clients on other machines:
      # -----------------------------------------------------------------------
      #
      # The config used here exposes port 9092 for _external_ connections to the broker
      # i.e. those from _outside_ the docker network. This could be from the host machine
      # running docker, or maybe further afield if you've got a more complicated setup.
      # If the latter is true, you will need to change the value 'localhost' in
      # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
      # remote clients
      #
      # For connections _internal_ to the docker network, such as from other services
      # and components, use broker:29092.
      #
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
      #
      - "29092:29092"
      - "9092:9092"
      #- "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
      KAFKA_DEFAULT_REPLICATION_FACTOR: "2"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # An important note about KAFKA_LISTENERS and KAFKA_ADVERTISED_LISTENERS
      # ---------------------------------------------------------------------
      # The KAFKA_LISTENERS setting defines where Kafka will listen for connections
      # The KAFKA_ADVERTISED_LISTENERS setting tells clients how to connect to the Kafka broker

      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092

      #KAFKA_LISTENERS: PLAINTEXT://kafka:29092, PLAINTEXT_HOST://0.0.0.0:9092
      #KAFKA_LISTENERS: PLAINTEXT://kafka:29092, PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      #KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100

      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      #KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2

      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      #KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2

      #KAFKA_JMX_PORT: 9092
      KAFKA_JMX_HOSTNAME: localhost

      #KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      #KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1

      #KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      #KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    volumes:
      - kafka-volume:/var/lib/kafka/data
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - data-ops-network
  ################################ 3 Kafka UI ############################################
  #
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMA_REGISTRY: http://kafka-schema-registry:8081
      KAFKA_CLUSTERS_0_ZOOKEEPER: kafka-zookeeper:2181
    #volumes:
    #- ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
    networks:
      - data-ops-network
  ################################ 4 Schema Registry ############################################
  #
  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: kafka-schema-registry
    #hostname: kafka-schema-registry
    #restart: unless-stopped
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      kafka-zookeeper:
        condition: service_started
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: kafka-zookeeper:2181

      #SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9101
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092

      #SCHEMA_REGISTRY_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9101

      #SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
      SCHEMA_REGISTRY_DEBUG: "true"
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --user superUser:superUser --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1
    networks:
      - data-ops-network
  ################################ 5 cp-kafka-connect ############################################
  #
  cp-kafka-connect: #https://hub.docker.com/r/confluentinc/cp-kafka-connect/tags
    #image: confluentinc/cp-kafka-connect:7.7.0
    build: ./03-messaging/01-apache-kafka/01-connectors/01-cp-kafka-connect
    container_name: cp-kafka-connect
    hostname: cp-kafka-connect
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - kafka-schema-registry
      - kafka-zookeeper
      - postgres-db
    environment:
      # About CONNECT_BOOTSTRAP_SERVERS
      # -------------------------------
      # CONNECT_BOOTSTRAP_SERVERS informs cp-kafka-connect about the location of the Kafka broker it should connect to.
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: "cp-kafka-connect"
      CONNECT_GROUP_ID: "cp-kafka-connect-group"
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000

      # config.storage.topic
      #   The name of the Kafka topic where connector configurations are stored
      CONNECT_CONFIG_STORAGE_TOPIC: _cp-kafka-connect-config-storage
      CONNECT_OFFSET_STORAGE_TOPIC: _cp-kafka-connect-offset-storage
      CONNECT_STATUS_STORAGE_TOPIC: _cp-kafka-connect-status-storage

      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      #CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      #CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8085"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      #CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"

      ########## Value Converters ##########
      #CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      #CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"

      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

      CONNECT_ZOOKEEPER_CONNECT: zookeeper:2181

      ########## SSL Configurations ##########
      ########## Additional Configurations ##########
      ########## Metric Reporter Configurations ##########
    volumes:
      - ./cp-kafka-connect/plugins/bigquery-keyfile.json:/etc/plugins/bigquery-keyfile.json
      #- ./cp-kafka-connect/connectors:/usr/share/confluent-hub-components
      #- ./cp-kafka-connect/config:/etc/kafka-connect
      #- ./cp-kafka-connect/postgresql-42.2.23.jar:/usr/share/java/postgresql-42.2.23.jar
    networks:
      - data-ops-network
  ################################ 3.7 ksql-db server ############################################
  #
  #ksqldb-server:
  #image: confluentinc/cp-ksqldb-server:latest
  #image: confluentinc/cp-ksqldb-server:7.5.3
  #hostname: ksqldb-server
  #container_name: ksqldb-server
  #depends_on:
  #- kafka
  #- schema-registry
  #ports:
  #- "8088:8088"
  #environment:
  #KSQL_CONFIG_DIR: "/etc/ksqldb"
  #KSQL_LISTENERS: http://0.0.0.0:8088
  #KSQL_BOOTSTRAP_SERVERS: kafka:29092
  #KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
  #KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
  #KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #KSQL_HOST_NAME: ksqldb-server
  #KSQL_CONNECT_URL: "http://connect:8083"
  #networks:
  #- data-ops-network
  ################################ 3.8 ksql-db-cli ############################################
  #
  #ksqldb-cli:
  #image: confluentinc/cp-ksqldb-cli:6.1.0
  #image: confluentinc/cp-ksqldb-cli:latest # usage -> docker-compose exec ksqldb-cli ksql http://ksqldb-server:8088
  #container_name: ksqldb-cli
  #depends_on:
  #- kafka
  #- debezium
  #- ksqldb-server
  #entrypoint: /bin/sh
  #tty: true
  #networks:
  #- data-ops-network
  ################################ 3.5 Debezium Connect ############################################
  #
  debezium-connect:
    image: debezium/connect:latest #https://hub.docker.com/r/debezium/connect
    restart: always
    container_name: debezium-connect
    hostname: debezium-connect
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium-connect-config-storage
      STATUS_STORAGE_TOPIC: debezium-connect-status-storage
      OFFSET_STORAGE_TOPIC: debezium-connect-offset-storage
      BOOTSTRAP_SERVERS: kafka:29092
      CONFIG_STORAGE_REPLICATION_FACTOR: 2
      OFFSET_STORAGE_REPLICATION_FACTOR: 2
      STATUS_STORAGE_REPLICATION_FACTOR: 2
      #CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      #CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      #KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      #CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema_registry:8081

      #CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      #CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      #VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      #CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema_registry:8081
      ENABLE_DEBEZIUM_SCRIPTING: "true"
      PLUGIN_PATH: /kafka/connect/plugins #added as part of the sink connector configuration
      GOOGLE_APPLICATION_CREDENTIALS: /etc/debezium/bigquery-keyfile.json # Specify the path inside the container
      #KAFKA_CONNECT_PLUGINS_DIR: /kafka/connect
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--silent",
          "--fail",
          "-X",
          "GET",
          "http://localhost:8084/connectors",
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    #volumes:
    #- ./jar_files:/kafka/connect/avro_jar_files
    networks:
      - data-ops-network
  ################################ 3.5 Debezium UI ############################################
  #
  debezium-ui:
    image: debezium/debezium-ui:latest
    restart: always
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium-connect:
        condition: service_healthy
    ports:
      #- "8082:8080"
      - "8082:8082"
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8084
    networks:
      - data-ops-network
################################ Networks ############################################
networks:
  data-ops-network:
    external: true # Use the existing network from docker-compose.yml

################################ Volumes ############################################
volumes:
  kafka-zookeeper-volume:
    name: kafka-zookeeper-volume
  kafka-volume:
    name: kafka-volume