services:
  # apache-airflow-webserver
  apache-airflow-webserver:
    build:
      context: ./workflow-orchestration-tools/01-airflow
      dockerfile: Dockerfile
    image: apache-airflow-webserver
    container_name: apache-airflow-webserver
    command: webserver
    restart: always
    ports:
      - "${APACHE_AIRFLOW_PORT}:8080"  # Host:Container mapping
    depends_on:
      postgres-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${APACHE_AIRFLOW_POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__ENABLE_TEST_CONNECTION: ${AIRFLOW__CORE__ENABLE_TEST_CONNECTION}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AIRFLOW__WEBSERVER__AUTHENTICATE: "True"
      AIRFLOW__WEBSERVER__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      #PYTHONPATH: /opt/airflow/plugins  # Ensures Python can import from plugins
      PYTHONPATH: /opt/airflow/plugins:/opt/airflow

      # OpenMetadata connection
      AIRFLOW__OPENMETADATA_AIRFLOW_APIS__DAG_GENERATED_CONFIGS: /opt/airflow/dag_generated_configs # Specifies where OpenMetadata stores generated DAG configurations.
      AIRFLOW__OPENMETADATA_AIRFLOW_APIS__OPENMETADATA_SERVER_HOST: http://open-metadata-server:8585/api # Points Airflow to the OpenMetadata server for API communication.
    volumes:
      - ./workflow-orchestration-tools/01-airflow/dags:/opt/airflow/dags
      - ./workflow-orchestration-tools/01-airflow/logs:/opt/airflow/logs
      - ./workflow-orchestration-tools/01-airflow/data:/opt/airflow/data
      - ./workflow-orchestration-tools/01-airflow/plugins:/opt/airflow/plugins
      - ./workflow-orchestration-tools/01-airflow/dag_generated_configs:/opt/airflow/dag_generated_configs
    networks:
      - data-ops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # apache-airflow-scheduler
  apache-airflow-scheduler:
    build:
      context: ./workflow-orchestration-tools/01-airflow
      dockerfile: Dockerfile
    image: apache-airflow-scheduler
    container_name: apache-airflow-scheduler
    command: scheduler
    restart: always
    depends_on:
      postgres-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${APACHE_AIRFLOW_POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__ENABLE_TEST_CONNECTION: ${AIRFLOW__CORE__ENABLE_TEST_CONNECTION}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      #PYTHONPATH: /opt/airflow/plugins  # Ensures Python can import from plugins
      PYTHONPATH: /opt/airflow/plugins:/opt/airflow

      # OpenMetadata connection
      AIRFLOW__OPENMETADATA_AIRFLOW_APIS__DAG_GENERATED_CONFIGS: /opt/airflow/dag_generated_configs # Specifies where OpenMetadata stores generated DAG configurations.
      AIRFLOW__OPENMETADATA_AIRFLOW_APIS__OPENMETADATA_SERVER_HOST: http://open-metadata-server:8585/api # Points Airflow to the OpenMetadata server for API communication.
    volumes:
      - ./workflow-orchestration-tools/01-airflow/dags:/opt/airflow/dags
      - ./workflow-orchestration-tools/01-airflow/logs:/opt/airflow/logs
      - ./workflow-orchestration-tools/01-airflow/data:/opt/airflow/data
      - ./workflow-orchestration-tools/01-airflow/plugins:/opt/airflow/plugins
      - ./workflow-orchestration-tools/01-airflow/dag_generated_configs:/opt/airflow/dag_generated_configs
    networks:
      - data-ops-network

################################ Networks ############################################
networks:
  data-ops-network:
    external: true # Use the existing network from docker-compose.yml