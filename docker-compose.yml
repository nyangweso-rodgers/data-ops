version: "3"
services:
  ######################################
  # mongo
  #
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    #env_file:
    #- .env # Using the shared root .env file
    #environment:
    #MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
    #MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    #MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}

    #command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    #command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "27017"]
    volumes:
      - mongo_volume:/data/db
      #- ./init-replica-set.js:/docker-entrypoint-initdb.d/init-replica-set.js
    #healthcheck:
    #test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo:27017\"},{_id:1,host:\"mongo-secondary1:27018\"},{_id:2,host:\"mongo-secondary2:27019\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
    #interval: 10s
    #start_period: 30s
    #entrypoint: ["/usr/bin/mongod", "--replSet", "rsmongo", "--bind_ip_all"]
    #entrypoint: ["mongod", "--replSet", "rsmongo", "--bind_ip_all"]
    #networks:
    #- mongo-network
  ######################################
  # mongo-secondary1
  #
  #mongo-secondary1:
  #image: mongo:latest
  #container_name: mongo-secondary1
  #ports:
  #- "27018:27018" # Map different port for each member
  #command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
  #command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "27018"]
  #volumes:
  #- mongo_secondary1_volume:/data/db
  #entrypoint: ["/usr/bin/mongod", "--replSet", "rsmongo", "--bind_ip_all"]
  #entrypoint: ["mongod", "--replSet", "rsmongo", "--bind_ip_all"]
  #entrypoint:
  #["mongod", "--replSet", "rsmongo", "--bind_ip_all", "--port", "27018"]
  #networks:
  #- mongo-network
  ######################################
  # mongo-secondary2
  #
  #mongo-secondary2:
  #image: mongo:latest
  #container_name: mongo-secondary2
  #ports:
  #- "27019:27019" # Map different port for each member
  #command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
  #command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "27019"]
  #volumes:
  #- mongo_secondary2_volume:/data/db
  #entrypoint: ["/usr/bin/mongod", "--replSet", "rsmongo", "--bind_ip_all"]
  #entrypoint: ["mongod", "--replSet", "rsmongo", "--bind_ip_all"]
  #entrypoint:
  #["mongod", "--replSet", "rsmongo", "--bind_ip_all", "--port", "27019"]
  #networks:
  #- mongo-network
  ######################################
  # postgres DB
  #
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    #env_file:
    #- .env # Using the shared root .env file
    #environment:
    #POSTGRES_USER: ${POSTGRES_USER}
    #POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_volume:/var/lib/postgresql/data
  ######################################
  # pgadmin
  #
  pgadmin:
    image: dpage/pgadmin4
    container_name: postgres-pgadmin
    ports:
      - "5050:80"
    #env_file:
    #- .env # Using the shared root .env file
    #environment:
    #PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
    #PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_volume:/var/lib/pgadmin
    depends_on:
      - postgres
  ######################################
  # zookeeper
  #
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    #image: confluentinc/cp-zookeeper:latest
    #image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - 2181:2181
    #restart: on-failure
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      #ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_volume:/var/lib/zookeeper/data
      #- zookeeper-data:/var/lib/zookeeper/data
  ######################################
  # kafka
  #
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    #image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - 29092:29092
      - 9101:9101
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092, PLAINTEXT_HOST://localhost:9101
      #KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9101,PLAINTEXT_INTERNAL://0.0.0.0:29091

      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9101
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9101,PLAINTEXT_INTERNAL://kafka:29091
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:8098
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      #KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      KAFKA_DEFAULT_REPLICATION_FACTOR: "2"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

      #KAFKA_JMX_PORT: 9101
      #KAFKA_JMX_HOSTNAME: localhost

      #KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      #KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1

      #KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      #CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    depends_on:
      - zookeeper
    #restart: on-failure
    volumes:
      #- kafka-data:/var/lib/kafka/data
      - kafka_volume:/var/lib/kafka/data
  ######################################
  # kafka-ui
  #
  kafka-ui:
    #image: provectuslabs/kafka-ui:0.7.2 #not found
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMA_REGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper: 2181
    #volumes:
    #- ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
  ######################################
  # schema-registry
  #
  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    #image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - kafka
      - zookeeper
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9101
      #SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:8098"

      SCHEMA_REGISTRY_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9101
      #SCHEMA_REGISTRY_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9101

      #SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      #SCHEMA_REGISTRY_HOST_NAME: localhost

      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
      SCHEMA_REGISTRY_DEBUG: "true"
  ######################################
  # connect
  #
  #connect:
  #image: debezium/connect:latest
  #container_name: container_kafka_connect
  #ports:
  #- "8083:8083"
  #environment:
  #- GROUP_ID: 1
  #- CONFIG_STORAGE_TOPIC: kafka_connect_configs
  #- OFFSET_STORAGE_TOPIC: kafka_connect_offsets
  #- STATUS_STORAGE_TOPIC: kafka_connect_statuses
  #- BOOTSTRAP_SERVERS: kafka:9092
  #- CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #- CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #- CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
  #- CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
  #depends_on:
  #- zookeeper
  #- kafka
  #- mongo
  ######################################
  #Superset
  #
  superset:
    image: alexmerced/dremio-superset
    container_name: superset
    ports:
      - "8088:8088"
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@superset.com
      - ADMIN_PASSWORD=admin
  ######################################
  # kafka-producer-with-node.js
  #
  kafka-producer-with-node.js:
    build:
      context: ./kafka-producer-with-node.js
      dockerfile: Dockerfile
    image: kafka-producer-with-node.js
    container_name: kafka-producer-with-node.js
    depends_on:
      - kafka
    ports:
      - 3004:3004
    environment:
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      #KAFKA_BROKER: kafka:9092
  ######################################
  # mongodb-change-stream-app
  #
  mongodb-change-stream-app:
    build:
      context: ./mongodb-change-stream-app
      dockerfile: Dockerfile
    image: mongodb-change-stream-app
    container_name: mongodb-change-stream-app
    depends_on:
      - mongo
    environment:
      - MONGO_URI_FOR_SURVEY_SERVICE=${MONGO_URI_FOR_SURVEY_SERVICE}
    ports:
      - "4001:4001"
  ######################################
  # mongo-to-kafka
  #
  mongo-to-kafka:
    build:
      context: ./mongo-to-kafka
      dockerfile: Dockerfile
    image: mongo-to-kafka
    container_name: mongo-to-kafka
    depends_on:
      - mongo
      - kafka
    environment:
      - MONGO_URI=${MONGO_URI_FOR_SURVEY_SERVICE}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
    env_file:
      - .env
    ports:
      - "4000:4000"
  ######################################
  # next.js app
  #
  next.js-app:
    build:
      context: ./next.js-app
      dockerfile: Dockerfile
    image: next.js-app
    container_name: next.js-app
    ports:
      - "3003:3003"
    depends_on:
      - mongo
    environment:
      - MONGO_URI_FOR_SURVEY_SERVICE=${MONGO_URI_FOR_SURVEY_SERVICE}
    env_file:
      - .env
  ######################################
  # sale-order-api
  #
  sale-order-api:
    build:
      context: ./sale-order-api
      dockerfile: Dockerfile
    image: sale-order-api
    container_name: sale-order-api
    ports:
      - "3200:3200"
    depends_on:
      - mongo
  ######################################
  # customer-api
  #
  customer-api:
    build:
      context: ./customer-api
      dockerfile: Dockerfile
    image: customer-api
    container_name: customer-api
    ports:
      - "3300:3300"
    env_file:
      - .env # Specific .env for this service
    depends_on:
      - postgres
######################################
# networks
#
networks:
  mongo-network:
    driver: bridge
######################################
# volumes
#
volumes:
  mongo_volume:
    name: mongo_volume
    driver: local
  #mongo_secondary1_volume:
  #name: mongo_secondary1_volume
  #driver: local
  #mongo_secondary2_volume:
  #name: mongo_secondary2_volume
  #driver: local
  postgres_volume:
    name: postgres_volume
    driver: local
  pgadmin_volume:
    name: pgadmin_volume
    driver: local
  zookeeper_volume:
    name: zookeeper_volume
    driver: local
  kafka_volume:
    name: kafka_volume
    driver: local
